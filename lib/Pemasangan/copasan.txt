import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:path/path.dart' as path;
import 'package:file_picker/file_picker.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:io';
//Menu
import '../Menu/MenuPemasangan.dart';
import '../user/User.dart';

class InputSPK extends StatefulWidget {
  static const String id = "/InputSPK";
  final User? userData;
  const InputSPK({Key? key, required this.userData}) : super(key: key);
  @override
  _InputSPKState createState() => _InputSPKState();
}

class _InputSPKState extends State<InputSPK> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController nomorJoController = TextEditingController();
  final TextEditingController namaAgenController = TextEditingController();
  final TextEditingController alamatAgenController = TextEditingController();
  final TextEditingController teleponAgenController = TextEditingController();
  final TextEditingController tidController = TextEditingController();
  final TextEditingController midController = TextEditingController();
  String selectedKota = 'Pilih Kota';
  String selectedKanwil = 'Pilih Kanwil';
  DateTime selectedDate = DateTime.now();
  String selectedFile = '';
  String? _fileName;

  List<String> kotaList = [];
  List<String> kanwilList = [];

  Future<void> _selectFile() async {
    FilePickerResult? result = await FilePicker.platform.pickFiles(
      type: FileType.custom,
      allowedExtensions: ['xlsx', 'xls'],
    );

    if (result != null) {
      setState(() {
        selectedFile = result.files.single.path!;
      });
    }
  }

  bool dataFetched = false;
  @override
  void initState() {
    super.initState();
    fetchKotaList();
    fetchKanwilList().then((_) {
      setState(() {
        dataFetched = true;
      });
    });
  }

  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: selectedDate,
      firstDate: DateTime(2015),
      lastDate: DateTime(2101),
    );
    if (picked != null && picked != selectedDate) {
      setState(() {
        selectedDate = picked;
      });
    }
  }

  void sendHttpRequestWithBody() async {
    final String url = "http://localhost/fms/api/spk_api/save";

    try {
      var request = http.MultipartRequest('POST', Uri.parse(url));

      request.fields['no_spk'] = nomorJoController.text;
      request.fields['nama_agen'] = namaAgenController.text;
      request.fields['alamat_agen'] = alamatAgenController.text;
      request.fields['telepon_agen'] = teleponAgenController.text;
      request.fields['kota'] = selectedKota;
      if (selectedKanwil != null && selectedKanwil.contains(':')) {
        final parts = selectedKanwil.split(':');
        final idKanwil = parts[0];
        request.fields['id_kanwil'] = idKanwil;
      }
      request.fields['tid'] = tidController.text;
      request.fields['mid'] = midController.text;
      request.fields['tanggal'] = DateFormat("yyyy-MM-dd").format(selectedDate);
      request.fields['created_by'] = widget.userData!.username;

      print(request.fields['created_by']);
      // print('Username: ${widget.userData!.username}');

      print('namaaaaaaaa' + selectedFile);
      if (selectedFile.isNotEmpty) {
        var file = File(selectedFile);
        var fileName = path.basename(file.path);

        print('nama file' + fileName);
        request.files.add(
          http.MultipartFile(
            'dok_spk',
            file.readAsBytes().asStream(),
            file.lengthSync(),
            filename: fileName,
          ),
        );
      }

      var response = await request.send();
      final responseString = await response.stream.bytesToString();

      print('Response body: $responseString');

      if (response.statusCode == 200) {
        var responseData = json.decode(responseString);

        if (responseData['success'] == true) {
          print('SPK berhasil disimpan');
        } else {
          print('SPK gagal disimpan: ${responseData['err_msg']}');
        }
      } else {
        print('Request failed with status: ${response.statusCode}');
      }
    } catch (error) {
      print('An error occurred: $error');
    }
  }

  Future<void> fetchKotaList() async {
    final String apiUrl = "http://localhost/fms/api/kanwil_api/get_all_kota";

    try {
      final response = await http.get(Uri.parse(apiUrl));

      if (response.statusCode == 200) {
        final responseData = json.decode(response.body);

        if (responseData['status'] == true) {
          final List<dynamic> kotaData = responseData['data'];
          kotaList = kotaData.map<String>((item) {
            return "${item['city_name']}";
          }).toList();
        } else {
          print("Error fetching Kanwil data");
        } //

        print('Kota data: $kotaList');
      } else {
        print("Error fetching Kota data");
      }
    } catch (error) {
      print('An error occurred while fetching Kota data: $error');
    }
  }

  Future<void> fetchKanwilList() async {
    final String apiUrl = "http://localhost/fms/api/kanwil_api/get_all_kanwil";

    try {
      final response = await http.get(Uri.parse(apiUrl));

      if (response.statusCode == 200) {
        final responseData = json.decode(response.body);

        if (responseData['status'] == true) {
          final List<dynamic> kanwilData = responseData['data'];
          kanwilList = kanwilData.map<String>((item) {
            final String id = item['id'].toString();
            final String nama = item['nama'];
            return "$id:$nama";
          }).toList();
        } else {
          print("Error fetching Kanwil data");
        }
        print('Kanwil data: $kanwilList');
      } else {
        print("Error fetching Kanwil data");
      }
    } catch (error) {
      print('An error occurred while fetching Kanwil data: $error');
    }
  }

  String? validateDropdown(String? value, String defaultValue) {
    if (value == null || value == defaultValue) {
      return '$defaultValue wajib dipilih';
    }
    return null;
  }

  String? validateFile(String? value) {
    if (value == null || value.isEmpty) {
      return 'File wajib diunggah';
    }
    return null;
  }

  Future<bool> _onWillPop() async {
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(
        builder: (context) => const MenuPemasangan(),
      ),
    );
    return false;
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: _onWillPop,
      child: Scaffold(
        appBar: AppBar(
          centerTitle: true,
          automaticallyImplyLeading: false,
        ),
        body: Padding(
          padding: const EdgeInsets.all(25.0),
          child: SingleChildScrollView(
            child: Form(
              key: _formKey,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'Input JO',
                    style: TextStyle(
                      fontSize: 16.0,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 25),
                  TextFormField(
                    controller: nomorJoController,
                    decoration: const InputDecoration(
                      labelText: 'Nomor JO',
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.all(Radius.circular(8.0)),
                      ),
                    ),
                    validator: (value) {
                      if (value!.isEmpty) {
                        return 'Nomor JO wajib diisi';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 15),
                  TextFormField(
                    controller: namaAgenController,
                    decoration: const InputDecoration(
                      labelText: 'Nama Agen',
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.all(Radius.circular(8.0)),
                      ),
                    ),
                    validator: (value) {
                      if (value!.isEmpty) {
                        return 'Nama Agen wajib diisi';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 15),
                  TextFormField(
                    controller: alamatAgenController,
                    decoration: const InputDecoration(
                      labelText: 'Alamat Agen',
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.all(Radius.circular(8.0)),
                      ),
                    ),
                    validator: (value) {
                      if (value!.isEmpty) {
                        return 'Alamat Agen wajib diisi';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 15),
                  Row(
                    children: [
                      Expanded(
                        child: TextFormField(
                          controller: teleponAgenController,
                          decoration: const InputDecoration(
                            labelText: 'Telepon Agen',
                            border: OutlineInputBorder(
                              borderRadius:
                                  BorderRadius.all(Radius.circular(8.0)),
                            ),
                            prefixText: '+62 ',
                            contentPadding: EdgeInsets.symmetric(
                                horizontal: 10, vertical: 20),
                          ),
                          validator: (value) {
                            if (value!.isEmpty) {
                              return 'Telepon Agen wajib diisi';
                            }
                            return null;
                          },
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 15),
                  TextFormField(
                    controller: tidController,
                    decoration: const InputDecoration(
                      labelText: 'TID',
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.all(Radius.circular(8.0)),
                      ),
                    ),
                    validator: (value) {
                      if (value!.isEmpty) {
                        return 'TID wajib diisi';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 15),
                  TextFormField(
                    controller: midController,
                    decoration: const InputDecoration(
                      labelText: 'MID',
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.all(Radius.circular(8.0)),
                      ),
                    ),
                    validator: (value) {
                      if (value!.isEmpty) {
                        return 'MID wajib diisi';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 15),
                  Container(
                    width: double.infinity,
                    child: DropdownButtonHideUnderline(
                      child: DropdownButtonFormField<String?>(
                        value: selectedKota,
                        onChanged: (String? newValue) {
                          setState(() {
                            selectedKota = newValue!;
                          });
                        },
                        items: <String?>['Pilih Kota', ...kotaList]
                            .map<DropdownMenuItem<String?>>((String? value) {
                          return DropdownMenuItem<String?>(
                            value: value,
                            child: Align(
                              alignment: Alignment.centerLeft,
                              child: Text(value ?? ''),
                            ),
                          );
                        }).toList(),
                        decoration: InputDecoration(
                          hintText: 'Pilih Kota',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(8.0),
                          ),
                          contentPadding: const EdgeInsets.symmetric(
                              horizontal: 10, vertical: 10),
                        ),
                        isDense: true,
                        isExpanded: true,
                      ),
                    ),
                  ),
                  const SizedBox(height: 20),
                  Container(
                    width: double.infinity,
                    child: DropdownButtonHideUnderline(
                      child: DropdownButtonFormField<String?>(
                        value: selectedKanwil,
                        onChanged: (String? newValue) {
                          setState(() {
                            selectedKanwil = newValue!;
                          });
                        },
                        items: <String?>['Pilih Kanwil', ...kanwilList]
                            .map<DropdownMenuItem<String?>>((String? value) {
                          final parts = value?.split(':');
                          final namaKanwil = parts != null && parts.length == 2
                              ? parts[1].toUpperCase()
                              : value;
                          return DropdownMenuItem<String?>(
                            value: value,
                            child: Align(
                              alignment: Alignment.centerLeft,
                              child: Text(namaKanwil ?? ''),
                            ),
                          );
                        }).toList(),
                        decoration: InputDecoration(
                          hintText: 'Pilih Kanwil',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(8.0),
                          ),
                          contentPadding: const EdgeInsets.symmetric(
                              horizontal: 10, vertical: 10),
                        ),
                        isDense: true,
                        isExpanded: true,
                      ),
                    ),
                  ),
                  const SizedBox(
                    height: 15,
                  ),
                  Container(
                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.grey),
                      borderRadius: BorderRadius.circular(8.0),
                    ),
                    child: Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Row(
                        children: [
                          const Icon(Icons.calendar_today),
                          const SizedBox(width: 15),
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Text(
                                  "Tanggal :",
                                  style: TextStyle(fontWeight: FontWeight.bold),
                                ),
                                Text(
                                  DateFormat.yMd().format(selectedDate),
                                ),
                              ],
                            ),
                          ),
                          TextButton(
                            onPressed: () => _selectDate(context),
                            child: const Text("Ubah Tanggal"),
                          ),
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(
                    height: 15,
                  ),
                  Container(
                    decoration: BoxDecoration(
                      border: Border.all(
                        width: 1.0,
                        color: Colors.grey,
                      ),
                      borderRadius: BorderRadius.circular(8.0),
                    ),
                    height: 55,
                    padding: const EdgeInsets.all(8.0),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Expanded(
                          child: Text(path.basename(
                              _fileName ?? "Tidak ada file yang diunggah")),
                        ),
                        SizedBox(
                          width: 90,
                          child: ElevatedButton(
                            onPressed: () async {
                              await _selectFile();
                              if (selectedFile.isNotEmpty) {
                                setState(() {
                                  _fileName = selectedFile.split('/').last;
                                });
                              }
                            },
                            style: ElevatedButton.styleFrom(
                              padding: const EdgeInsets.all(8.0),
                            ),
                            child: const Text('Upload'),
                          ),
                        ),
                      ],
                    ),
                  ),
                  if (_fileName == null || _fileName!.isEmpty)
                    const Padding(
                      padding:
                          EdgeInsets.symmetric(vertical: 8.0, horizontal: 5.0),
                      child: Text(
                        'Jenis file xlsx. Ukuran file maksimal 2 MB',
                        style: TextStyle(color: Colors.grey),
                      ),
                    ),
                  const SizedBox(height: 20.0),
                  Row(
                    children: [
                      ElevatedButton(
                        onPressed: () {
                          if (_formKey.currentState!.validate() &&
                              _fileName != null &&
                              _fileName!.isNotEmpty) {
                            // Simpan data
                          } else if (_fileName == null || _fileName!.isEmpty) {
                            setState(() {});
                          }
                        },
                        style: ButtonStyle(
                          backgroundColor:
                              MaterialStateProperty.all<Color>(Colors.blue),
                          minimumSize: MaterialStateProperty.all<Size>(
                              const Size(100, 50)),
                          shape:
                              MaterialStateProperty.all<RoundedRectangleBorder>(
                            RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8.0),
                            ),
                          ),
                        ),
                        child: const Text(
                          'Simpan',
                          style: TextStyle(fontSize: 15.0, color: Colors.white),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}
